<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8"/>
    <meta name="author" content="Marc Hoyois"/>
    <meta name="description" content="Prevents embedded content from loading automatically"/>
    <title>ClickToPlugin Safari extension</title>
    <link rel="stylesheet" type="text/css" href="../styles.css"/>
</head>
<body>
<header id="top">
<h1>ClickToPlugin Safari extension</h1>
<p class="author">by Marc Hoyois</p>
</header>

<nav>
<a href="../">My Safari extensions</a> &gt; ClickToPlugin
</nav>

<div id="download" class="nav">
<b>Download links</b>
<ul>
<li><a href="http://github.com/downloads/hoyois/safariextensions/ClickToPlugin-1.4.9.safariextz">Download ClickToPlugin 1.4.9</a></li>
<li><a href="http://github.com/downloads/hoyois/safariextensions/ClickToPlugin.fr-1.4.9.safariextz">Télécharger ClickToPlugin 1.4.9 en français</a></li>
<li><a href="http://github.com/downloads/hoyois/safariextensions/ClickToPlugin.ru-1.4.9.safariextz">Скачать ClickToPlugin 1.4.9 по-русски</a></li>
</ul>
</div>

<div class="warning"><p>ClickToPlugin 1.4.9 requires Safari 5.0.1 or newer.</p></div>

<div id="contents" class="nav">
<b>Jump to</b>
<ul>
    <li><a href="#features">Features</a></li>
    <li><a href="#settings">Settings</a></li>
    <li><a href="#faq_issues">FAQ &amp; Common Issues</a></li>
    <li><a href="#changelog">Release Notes</a></li>
</ul>
</div>

<div id="intro">
<p>This is an extension of my ClickToFlash extension that can deal with all types of embedded content.</p>

<p>Feel free to <a href="mailto:marc%20dot%20hoyois%20@t%20gmail%20dot%20com?subject=%5BCTP%5D%20Your%20extension%20rocks,%20but...">request features</a> and please <a href="mailto:marc%20dot%20hoyois%20@t%20gmail%20dot%20com?subject=%5BCTP%5D%20This%20piece%20of%20garbage%20doesn%27t%20work%21">report bugs</a>. <b>However, please read the <a href="#faq_issues">FAQ &amp; Common Issues</a> section carefully before sending me an email.</b></p>

<p>To unpack the source to the current directory, run <code>xar -f /path/to/ClickToPlugin.safariextz -x</code>. You can also <a href="http://github.com/hoyois/clicktoflash/tree/click-to-plugin">browse the latest source</a> on GitHub.</p>
</div>

<h3 id="acknowledgements">Acknowledgements</h3>
<p>Both of my extensions owe a lot to several people:</p>
<ul>
    <li>This extension is directly built on <a href="http://github.com/mattball/ClickToFlash-safari-extension">this previous ClickToFlash extension</a> by Matt Ball. Although most of the Javascript code and overall organization has changed, my extension still uses two key ideas from it: a ClickToFlash class that is instantiated by every web page and an army of 'killers' having the task to find HTML5 video replacements. The awesome CSS of the placeholders is also Matt's.</li>
    <li>I learned from Félix Cloutier (developer of <a href="http://safari.laissemoichercherca.com/plugincustoms">Plugin Customs</a>) how to detect Java applets.</li>
    <li>I learned from Rodger Combs' <a href="http://combsconnections.tk/extensions/">Plugin Blocker</a> extension about AJAX requests and how to use them to fetch the URL of videos on Vimeo and Veoh.</li>
</ul>

<p>Further, thanks should be given to</p>
<ul>
    <li>Yuli Cherkashin (Юлий Черкашин) for the Russian localization.</li>
</ul>

<h2 id="features">Features</h2>
<p class="toplink"><a href="#top">To the top</a></p>

<h3 id="features_blocking">Blocking embedded content</h3>
<p>ClickToPlugin can replace every <code>&lt;embed&gt;</code> and <code>&lt;object&gt;</code> element on a web page by a placeholder element (fig.&#160;1) during page-loading. The user can load the embedded content manually by clicking on this placeholder. The type of content that ClickToPlugin blocks can be specified in the <a href="#MIME_settings">settings</a>. Right-clicking on the placeholder reveals the usual contextual menu with one added item, 'Hide Plugin', which effectively removes the HTML element from the webpage. This is useful for getting rid of overlays that block access to page content. Additional contextual menu items for adding a page or source to the whitelist and unlocking all Flash elements on the page can be enabled in the <a href="#menus">settings</a>.</p>

<figure>
<img src="CTP_Flash.png" alt="Flash placeholder"/>
<img src="CTP_Silverlight.png" alt="Silverlight placeholder"/>
<img src="CTP_Java.png" alt="Java placeholder"/>
<img src="CTP_QuickTime.png" alt="QuickTime placeholder"/>
<img src="CTP_WM.png" alt="Windows Media placeholder"/>
<figcaption>Figure 1: Examples of placeholder elements</figcaption>
</figure>

<p class="note">This extension does not block <code>&lt;applet&gt;</code> elements. These elements are used to embed Java applets into web pages and will launch a Java plugin. The reason is that they <a href="https://bugs.webkit.org/show_bug.cgi?id=44023">cannot</a> be blocked.</p>

<h3 id="features_replacing">Replacing blocked content by HTML5 videos</h3>
<p>ClickToPlugin is able to replace certain blocked elements by HTML5 <code>&lt;video&gt;</code> tags. The label of the placeholder is then changed accordingly, and an 'HD' prefix is added if ClickToPlugin knows that the video has resolution 720p or 1080p (fig.&#160;2). Clicking on such a placeholder loads Safari's video player. In Snow Leopard this video player features a fullscreen button (fig.&#160;3) and uses hardware acceleration on supported Macs. Double-clicking inside the video player toggles looping.</p>

<figure>
<img src="CTP_H264.png" alt="Video placeholder"/>
<img src="CTP_HDH264.png" alt="HD Video placeholder"/>
<figcaption>Figure 2: Video placeholder elements</figcaption>
</figure>

<figure>
<img src="Safari_video_player.png" alt="Safari video player"/>
<figcaption>Figure 3: Safari's video player in Snow Leopard</figcaption>
</figure>

<p>The original element can still be loaded by right-clicking on the placeholder and choosing 'Load Plugin', or by right-clicking the video and choosing 'Reload in Plugin'.</p>

<p>By default, ClickToPlugin will first try to replace an element by a video playable natively (i.e. without any plugin) by QuickTime. It should succeed with the following elements:</p>
<ul>
<li><b>YouTube videos.</b> Both on-site and embedded videos. All YouTube videos have H.264-encoded MP4-contained sources. Resolutions in this format are Medium (&#x2264;360p, always available), 720p, 1080p, and 4K.</li>
<li><b>Vimeo videos.</b> Both on-site and embedded videos. All Vimeo videos have H.264-encoded sources, and most of them are in MP4 containers. A few are FLV files that Safari cannot play natively. Resolutions are 360p and 720p.</li>
<li><b> Dailymotion videos.</b> Both on-site and embedded videos (not including external videos available on Dailymotion's website). All Dailymotion videos available in 'high quality' have H.264-encoded MP4-contained sources. Resolution are &#x2264;480p and 720p.</li>
<li>Videos played in the <a href="http://www.longtailvideo.com/">JW Player</a>, if they are playable by QuickTime.</li>
<li>Objects with <code>&lt;video&gt;</code> fallback content.</li>
<li>Objects handled by the QuickTime web plugin. At this time, HTML5 videos in Safari do not seem to allow streaming, and ClickToPlugin is not able to detect streaming videos that are wrapped in a <code>.mov</code> container. For those videos, Safari's video player will never get past the 'Loading...' stage, but you can select 'Reload in QuickTime' from the contextual menu to access the stream.</li>
</ul>

<p>With the help of third-party QuickTime components, ClickToPlugin can further replace the following elements:</p>
<ul>
    <li>480p YouTube videos. (requires Perian)</li>
    <li>All remaining Vimeo and Dailymotion videos. (requires Perian)</li>
    <li><b>Veoh videos.</b> (requires Perian) Both on-site and embedded videos (not including external videos available on Veoh's website).</li>
    <li>Videos played in the <a href="http://slvideoplayer.codeplex.com/">Silverlight Video Player</a>. (requires Flip4Mac)</li>
    <li>Directly embedded Windows Media videos. (requires Flip4Mac)</li>
    <li>Directly embedded DivX videos. (requires Perian)</li>
</ul>

<p class="note">Playback of nonnative codecs in Safari uses much more CPU than native playback. Moreover, if autoplay is enabled, Safari usually starts playing the video too early for smooth playback. For these reasons the feature can be disabled completely. In my casual testing, playback of 480p YouTube videos using Perian uses on average half as much CPU as YouTube's Flash player, while playback of Windows Media videos using Flip4Mac uses on average 60% as much CPU as the Silverlight Video Player.</p>

<h4>Download links</h4>

<p>Hovering the mouse over the bottom of a video placeholder reveals a link (fig.&#160;4 left) which can be clicked to start downloading the video. Once the video player has been loaded, a similar link appears when moving the mouse cursor upward from the play/pause button (fig.&#160;4 right).</p>

<figure>
<img src="CTP_Download1.tiff" alt="Video download link on placeholder"/>
<img src="CTP_Download2.tiff" alt="Video download link on video"/>
<figcaption>Figure 4: Video download links</figcaption>
</figure>

<h4>Playlists</h4>

<p>If the 'Use playlists' setting is enabled, ClickToPlugin can sometimes load whole playlists into the video player. This feature is available for YouTube's on-site playlists (<code>&amp;p=</code> URLs), YouTube's embedded playlists, and JW Player playlists. When a playlist is used, an additional control bar appears above the default one, featuring the title of the video being played, previous/next buttons to navigate the playlist, and an input field that can be used to jump to a video in the playlist (fig.&#160;5). The title of the video also serves as a link to the video that can be used for direct download.</p>

<figure>
<img src="CTP_Playlist.png" alt="Video playlist"/>
<figcaption>Figure 5: Video playlist controls</figcaption>
</figure>

<h2 id="settings">Settings</h2>
<p class="toplink"><a href="#top">To the top</a></p>

<h3 id="MIME_settings">MIME Settings</h3>

<figure>
<img src="MIME_Settings.png" alt="MIME settings screenshot"/>
</figure>

<p><b>Block all MIME types</b><br/>
To block all embedded content. An exception is made for natively supported MIME types, such as common image types, PDF documents, and SVG documents.</p>

<p>MIME types are strings of the form '<em>type</em>/<em>subtype</em>[;<em>parameters</em>]' specifying the nature of the embedded content. Common <em>type</em>s are:</p>
<ul>
<li><b>image</b> for embedded images;</li>
<li><b>video</b> for embedded videos;</li>
<li><b>audio</b> for embedded audio;</li>
<li><b>application</b> for richer embedded content, including Flash, Silverlight, and Java.</li>
</ul>

<p>Here is a useful list of more specific matches:</p>
<ul>
<li><b>flash futuresplash</b> matches all content handled by the Flash plugin;</li>
<li><b>silverlight</b> matches all content handled by the Silverlight plugin;</li>
<li><b>java</b> matches all content handled by Java plugins;</li>
<li><b>x-ms</b> matches Windows Media content;</li>
<li><b>x-pn</b> matches Real Media content;</li>
<li><b>geplugin</b> matches Google Earth content.</li>
</ul>

<p><b>Allow QuickTime plugin</b><br/>
Instead of manually greenlisting the numerous MIME types handled by the QuickTime web plugin, tick this to allow all QuickTime content.</p>

<p>To see the full list of active plugins and which MIME types they control, go to 'Help' > 'Installed Plug-ins' in Safari's toolbar.</p>

<p class="note">If you only want to block Flash content, I recommend using the more lightweight <a href="../clicktoflash">ClickToFlash extension</a>.</p>

<h3 id="video_settings">Video Settings</h3>

<figure>
<img src="Video_Settings.png" alt="Video settings screenshot"/>
<img src="Video_Settings2.png" alt="Video settings screenshot 2"/>
<img src="Video_Settings3.png" alt="Video settings screenshot 3"/>
<img src="Video_Settings4.png" alt="Video settings screenshot 4"/>
</figure>

<p><b>Look for video replacements to</b><br/>
If unticked, ClickToPlugin does not go through the process of looking for video files to replace blocked elements. All the following options are then without effect.</p>

<p><b>Use playlists</b><br/>
If ticked, ClickToPlugin can load whole playlists from YouTube (on-site and embedded) and the JW Player into the HTML5 video player.</p>

<p><b>Show preview image on placeholder</b><br/>
If ticked, a preview image of the video is shown on the placeholder instead of the usual gray gradient. Such preview images are not available for all videos.</p>

<p><b>Load the video player automatically</b><br/>
If ticked, ClickToPlugin automatically replaces blocked elements on locations matching a string in the text field by <code>&lt;video&gt;</code> elements when available, without waiting for the user to click on a placeholder. Strings in the text field must be separated by spaces. Simply leave the text field blank to use this behavior on all web pages.</p>

<p><b>Initial behavior</b><br/>
Choose whether ClickToPlugin creates <code>&lt;video&gt;</code> tags with the 'preload' attribute set to 'none', to 'auto', or with the 'autoplay' attribute. With the 'Do not buffer' option, the video will only start buffering when the 'Play' button is clicked.</p>

<p><b>Nonnative codecs</b><br/>
Prescribe whether ClickToPlugin considers video files that will use third-party QuickTime components to play. If 'Use only as a last resort' is selected, ClickToPlugin will not load such videos unless there are no natively playable videos available. If 'Use freely' is selected, ClickToPlugin will load the highest-quality video regardless of its format.</p>

<p><b>Max resolution</b><br/>
An upper bound on the resolutions of the videos loaded by ClickToPlugin. (Because YouTube's videos are of average quality, I find that it is worth choosing the 1080p option even on a 720p screen.)</p>

<p><b>Sound volume</b><br/>
Sets the initial volume of videos created by ClickToPlugin. Videos on the active page will also respond to this slider while playing.</p>

<h3 id="whitelist_settings">Whitelists</h3>

<figure>
<img src="Whitelists.png" alt="Whitelist settings screenshot"/>
</figure>

<p><b>Location matches</b><br/>
Matches embedded content in documents whose absolute URL contains one of these strings.</p>

<p><b>Source matches</b><br/>
Matches embedded content whose absolute URL contains one of these strings.</p>

<p><b>Size matches</b><br/>
Matches the offset size of an element.</p>

<h3 id="menus">Contextual menu items</h3>

<figure>
<img src="Contextual_menu_items.png" alt="Contextual menu items settings screenshot"/>
</figure>

<p><b>Add to Whitelist</b><br/>
A contextual menu item that reads 'Add Source to Whitelist' on placeholder elements and 'Add Location to Whitelist' elsewhere. When selected, a JavaScript pop-up box appears with the URL of the source or location that the user can trim before adding to the respective whitelist.</p>

<p><b>Load All Plugins</b><br/>
Loads all blocked elements in a document.</p>

<p><b>View on Site</b><br/>
Appears on embedded YouTube, Vimeo, Dailymotion, and Veoh videos. It loads the video on its respective website in a new tab.</p>

<p><b>View in QuickTime Player</b><br/>
Opens a video in the QuickTime Player application.</p>

<h3 id="other_settings">Other</h3>

<figure>
<img src="Other.png" alt="Other settings screenshot"/>
<img src="Other2.png" alt="Other settings screenshot 2"/>
</figure>

<p><b>sIFR Text</b><br/>
sIFR is a pre-CSS3 technology for displaying advanced typography on the web. It uses JavaScript to replace some text elements on the page by text-mimicking Flash elements. Choose 'Show text only' to disable this process and display the original HTML text.</p>

<p><b>Opacity</b><br/>
This slider controls the opacity of the placeholder elements, from invisible to opaque.</p>

<p><b>Block content manually</b><br/>
If ticked, a pop-up box asks the user for confirmation before blocking any element. This box displays the following information about the element: its type (Flash, Silverlight, etc.), its location, its source, its position within its document, and its size. Further, an option 'Show Element' is added to the contextual menu of placeholder elements; selecting it shows the location and source of the blocked element, as well as the blocked element itself. This is useful for getting information about invisible elements or the location of elements within iframes.</p>

<h2 id="faq_issues">FAQ &amp; Common Issues</h2>
<p class="toplink"><a href="#top">To the top</a></p>

<h3 id="faq">FAQ</h3>

<p class="question">Can I use this extension together with the ClickToFlash plugin?</p>
<p class="answer">No, unless you want to have to click twice to unlock every element.</p>

<p class="question">Why would I want to allow all elements below a given size?</p>
<p class="answer">You don't. For security and privacy reasons, automatically allowing elements on random pages is not recommended. Also, elements can be small at first but later grow to become full-fledged ads.</p>
<p>The reason why some people will still use this setting despite my recommendation is the following.
Very small elements, also called 'invisible' elements, are not meant to be seen and thus often have important functions. Some web pages will be crippled when they are blocked, and obviously it is difficult to locate them and load them manually. For example, a common effect of invisible Flash is the message <em>Please install Flash player</em> being displayed instead of expected Flash content: this happens because an invisible Flash element whose function is to replace this message by the Flash object failed to load. The size of these control elements is usually 1x1 px, but some websites are known to use invisible elements up to 8x8 px in size.</p>
<p>That said, you should only use this setting to quickly check if an issue on a trusted page is caused by an invisible element. If it resolves the issue, turn the setting back off and use the 'Block content manually' setting to find out the source of the culprit, and match it with the source whitelist.</p>

<p class="question">Can I use regular expressions in whitelists?</p>
<p class="answer">Yes! All whitelist-like text fields in the settings support regular expressions. For a string to be considered as a regular expression, it must be enclosed in parentheses. These regular expressions must follow the Javascript syntax (in particular, lookbehinds are not supported). Invalid regular expressions are ignored.</p>

<p class="question" id="applet_blocking">Why did you remove blocking of Java <code>&lt;applet&gt;</code>s in version 1.4.7?</p>
<p class="answer">Before 1.4.7, the extension was listening to mutation events, which is known to affect performance significantly. Primarily for this reason, the DOM level 3 specification <a href="http://www.w3.org/TR/DOM-Level-3-Events/#_34">deprecates</a> the use of those events, and the WebKit team even <a href="https://bugs.webkit.org/show_bug.cgi?id=8191">decided</a> not to implement one of them, preferring to wait for better solutions. Mutation events were in particular used to detect <code>&lt;applet&gt;</code> elements. However,</p>
<ul>
    <li>the blocking of <code>&lt;applet&gt;</code>s was fake anyway: the Java plugin would still launch and often make the beach ball appear,</li>
    <li>the extension still blocks Java <code>&lt;object&gt;</code>s, and</li>
    <li>the <code>&lt;applet&gt;</code> tag should slowly disappear as it is deprecated in HTML4 and invalid in HTML5.</li>
</ul>
<p>True blocking of <code>&lt;applet&gt;</code> elements will be introduced as soon as it is actually possible, namely when <a href="https://bugs.webkit.org/show_bug.cgi?id=44023">this WebKit bug</a> is addressed.</p>

<h3 id="issues">Common issues</h3>

<h4>Google Street View not working</h4>

<p>Add <code>maps.gstatic.com</code> to the source whitelist or, if you have the 'Load All Plugins' contextual menu item enabled, use it after dragging the yellow guy on the map.</p>

<h4>Content still being blocked after whitelisting a page</h4>

<p>A single tab can contain several documents, each with its own URL, and the URL displayed in Safari's toolbar is that of the root document only. The location whitelist considers the location of an element to be the URL of its document. To find out the real location of an element, tick the 'Block content manually' checkbox in the settings, right-click on the element's placeholder, and select 'Show Element'.</p>

<h4 id="list_invisible">List of invisible elements having critical functions</h4>

<table>
<thead>
<tr>
    <th>Domains</th>
    <th>Function of invisible element</th>
    <th>Size</th>
    <th>Source</th>
</tr>
</thead>
<tbody>
<tr>
    <td>prostopleer.com &amp; others</td>
    <td>Required by SoundManager2 for Flash 9</td>
    <td>8x8</td>
    <td>soundmanager2_flash9.swf</td>
</tr>
<tr>
    <td>github.com, soundcloud.com, www.discogs.com &amp; others</td>
    <td>Required by SoundManager2 for Flash 8</td>
    <td>6x6 or 8x8</td>
    <td>soundmanager2.swf</td>
</tr>
<tr>
    <td>www.amazon.com</td>
    <td>Amazon music samples</td>
    <td>1x1</td>
    <td>g-ecx.images-amazon.com</td>
</tr>
<tr>
    <td>www.bbc.co.uk</td>
    <td>Loads video players on some news pages</td>
    <td>1x1</td>
    <td>emp_proxy.swf</td>
</tr>
<tr>
    <td>www.hulu.com</td>
    <td>Loads the main video player</td>
    <td>1x1</td>
    <td>http://www.hulu.com/loadplayer.swf</td>
</tr>
<tr>
    <td>various</td>
    <td>Required by Yahoo! Media Player</td>
    <td>1x1</td>
    <td>flashsound-2.0.31.swf</td>
</tr>
</tbody>
</table>

<h2 id="changelog">Release Notes</h2>
<p class="toplink"><a href="#top">To the top</a></p>

<p id="v1.4.9"><b>Version 1.4.9</b> (September 30, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.10">ClickToFlash 1.7.10</a></li>
</ul>

<p id="v1.4.8"><b>Version 1.4.8</b> (September 29, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.9">ClickToFlash 1.7.9</a></li>
</ul>

<p id="v1.4.7"><b>Version 1.4.7</b> (September 21, 2010)</p>
<ul>
    <li>Does not block <code>&lt;applet&gt;</code> elements anymore (read <a href="#applet_blocking">why</a>)</li>
    <li>Based on <a href="../clicktoflash/#v1.7.7">ClickToFlash 1.7.7</a></li>
</ul>

<p id="v1.4.6"><b>Version 1.4.6</b> (September 16, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.6">ClickToFlash 1.7.6</a></li>
</ul>

<p id="v1.4.5"><b>Version 1.4.5</b> (September 10, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.5">ClickToFlash 1.7.5</a></li>
</ul>

<p id="v1.4.4"><b>Version 1.4.4</b> (September 9, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.4">ClickToFlash 1.7.4</a></li>
</ul>

<p id="v1.4.3"><b>Version 1.4.3</b> (September 6, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.7.3">ClickToFlash 1.7.3</a></li>
</ul>

<p id="v1.4.2"><b>Version 1.4.2</b> (September 5, 2010)</p>
<ul>
    <li>Fixed: CSS of download links was broken in 1.4.1</li>
</ul>

<p id="v1.4.1"><b>Version 1.4.1</b> (September 5, 2010)</p>
<ul>
    <li>Fixed handling of QuickTime objects calling QuickTime Player (regression introduced in 1.4)</li>
</ul>

<p id="v1.4"><b>Version 1.4</b> (September 4, 2010)</p>
<ul>
    <li>Improved plugin detection</li>
    <li>Based on <a href="../clicktoflash/#v1.7">ClickToFlash 1.7</a></li>
</ul>

<p id="v1.3.3"><b>Version 1.3.3</b> (August 20, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.6.3">ClickToFlash 1.6.3</a></li>
</ul>

<p id="v1.3.2"><b>Version 1.3.2</b> (August 16, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.6.2">ClickToFlash 1.6.2</a></li>
</ul>

<p id="v1.3.1"><b>Version 1.3.1</b> (August 14, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.6.1">ClickToFlash 1.6.1</a></li>
</ul>

<p id="v1.3"><b>Version 1.3</b> (August 13, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.6">ClickToFlash 1.6</a></li>
</ul>

<p id="v1.2.1"><b>Version 1.2.1</b> (August 8, 2010)</p>
<ul>
    <li>Improved handling of QuickTime objects</li>
</ul>

<p id="v1.2"><b>Version 1.2</b> (August 8, 2010)</p>
<ul>
    <li>Safari's native MIME types are not blocked anymore</li>
    <li>Can now replace Silverlight, QuickTime, and Windows Media content by HTML5 videos</li>
    <li>Fixed invisible elements whitelisting</li>
    <li>Based on <a href="../clicktoflash/#v1.5.1">ClickToFlash 1.5.1</a></li>
</ul>

<p id="v1.1.1"><b>Version 1.1.1</b> (August 6, 2010)</p>
<ul>
    <li>Fixed a stupid typo in the code</li>
</ul>

<p id="v1.1"><b>Version 1.1</b> (August 6, 2010)</p>
<ul>
    <li>Based on <a href="../clicktoflash/#v1.5">ClickToFlash 1.5</a></li>
</ul>

<p id="v1.0.1"><b>Version 1.0.1</b> (August 3, 2010)</p>
<ul>
    <li>Fixed potential compatibility issues by trying not to block objects created by other extensions</li>
</ul>

<p id="v1.0"><b>Version 1.0</b> (August 3, 2010)</p>
<ul>
    <li>Initial release, based on <a href="../clicktoflash/#v1.4">ClickToFlash 1.4</a></li>
    <li>Extension icon by Ast A. Moore</li>
</ul>

<footer>
<p id="footer_left">Updated on September 30, 2010</p>
<p id="footer_right"><a href="#top">To the top</a></p>
<p id="footer_middle"><a href="http://validator.w3.org/check?uri=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Fclicktoplugin%2F;verbose=1">XHTML5</a> • <a href="http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Fclicktoplugin%2F&amp;profile=css3&amp;usermedium=all&amp;warning=1">CSS3</a></p>
</footer>

</body>
</html>

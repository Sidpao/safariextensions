<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta name="author" content="Marc Hoyois"/>
	<title>ClickToPlugin HTML5 replacements</title>
	<link rel="stylesheet" type="text/css" href="../../styles.css"/>
</head>
<body id="top">
<header>
<h1>ClickToPlugin HTML5 replacements</h1>
<nav>
<h3 class="offscreen">Navigation</h3>
<a href="../../">Home</a> &gt; <a>Safari extensions</a> &gt; <a href="./">ClickToPlugin &amp; ClickToFlash</a> &gt; <a>HTML5 replacements</a>
<nav>
<h4>Contents</h4>
<ul>
	<li><a href="#database">Get killers</a></li>
	<li><a href="#add_killers">How to add killers</a></li>
	<li><a href="#create_killers">How to create a killer</a></li>
</ul>
</nav>
</nav>
</header>

<div id="intro">
<p>To replace plug-ins by HTML5, ClickToPlugin uses independent Javascript objects called “killers”. A killer is a machine that transforms <a href="#plugin_data">plug-in data</a> into <a href="#media_data">media data</a>. ClickToPlugin has a number of built-in killers for popular audio and video services, but it also has the ability to load additional killers.</p>
</div>

<section id="database">
<header>
<h2>Get killers</h2>
<div class="toplink"><a href="#top">To the top</a></div>
</header>

<p>To install a killer from the table below, download the file in the first column and follow <a href="#add_killers">these instructions</a>. The killers in the first part of the table are included in ClickToPlugin, but the versions posted here may be more recent.</p>

<p>If you would like to share your own killers, you can do so by <a href="./#contact">contacting me</a> or directly on <a href="https://github.com/hoyois/plugin-to-html5">GitHub</a>.</p>

<table>
<thead>
<tr>
	<th></th>
	<th>Applies to</th>
	<th>Updated on</th>
</tr>
</thead>
<tbody>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Blip.js">Blip</a></td>
	<td>On-site and embedded videos from <a href="http://blip.tv/">Blip.tv</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Break.js">Break</a></td>
	<td>On-site and embedded videos from <a href="http://www.break.com/">Break</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Dailymotion.js">Dailymotion</a></td>
	<td>On-site and embedded videos from <a href="http://www.dailymotion.com/">Dailymotion</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/DivX.js">DivX</a></td>
	<td>DivX plug-in objects</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Facebook.js">Facebook</a></td>
	<td>On-site and embedded videos from Facebook</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Flash.js">Flash</a></td>
	<td>Generic Flash media players</td>
	<td><time datetime="2011-08-14">August 23, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Metacafe.js">Metacafe</a></td>
	<td>On-site and embedded videos from <a href="http://www.metacafe.com/">Metacafe</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/QuickTime.js">QuickTime</a></td>
	<td>QuickTime plug-in objects</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Silverlight.js">Silverlight</a></td>
	<td>Generic Silverlight media players</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Vimeo.js">Vimeo</a></td>
	<td>On-site and embedded videos from <a href="http://vimeo.com/">Vimeo</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/WindowsMedia.js">WindowsMedia</a></td>
	<td>Windows Media plug-in objects</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/YouTube.js">YouTube</a></td>
	<td>On-site and embedded videos and playlists from <a href="http://www.youtube.com/">YouTube</a></td>
	<td><time datetime="2011-08-19">August 19, 2011</time></td>
</tr>
</tbody>
<tbody>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/ВКонтакте.js">ВКонтакте</a></td>
	<td>Videos on <a href="http://vkontakte.ru/">ВКонтакте</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/BIM.js">BIM</a></td>
	<td>Some versions of the <a href="http://www.broadcast-interactive.com/products/contentrev/BIMVid.html">BIMVid</a> Flash player</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Flowplayer.js">Flowplayer</a></td>
	<td>The <a href="http://flowplayer.org/">Flowplayer</a> Flash player and some versions of the <a href="http://www.broadcast-interactive.com/products/contentrev/BIMVid.html">BIMVid</a> Flash player</td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Megavideo.js">Megavideo</a></td>
	<td>On-site and embedded videos from <a href="http://megavideo.com/">Megavideo</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
<tr>
	<td><a href="https://raw.github.com/hoyois/plugin-to-html5/master/Vodpod.js">Vodpod</a></td>
	<td>YouTube and Vimeo videos embedded through <a href="http://vodpod.com/">Vodpod</a></td>
	<td><time datetime="2011-08-14">August 14, 2011</time></td>
</tr>
</tbody>
</table>
</section>

<section id="add_killers">
<header>
<h2>How to add killers</h2>
<div class="toplink"><a href="#top">To the top</a></div>
</header>

<p>This section describes how to add the killer file <code>myKiller.js</code> to ClickToPlugin in Mac OS X.</p>

<h3>Step 0: Start Apache</h3>

<p>If it is not already running, start the Apache server by turning on Web Sharing in Sharing preferences (<a href="help:anchor=mchlp1760-c">learn more</a>).</p>

<h3>Step 1: Move the files into place</h3>

<p>Place <code>myKiller.js</code> in <code>~/Sites/</code> or a subdirectory thereof. For this example we will create the subdirectory <code>~/Sites/CTP/</code> and place the file there.</p>

<h3>Step 2: Set up ClickToPlugin</h3>

<p>Open ClickToPlugin’s preferences and add <code>http://localhost/~username/CTP/myKiller.js</code> to the “Plug-in to HTML5 converters” list, where <code>username</code> must be replaced by your actual short user name (which is the name of your Home folder).</p>

<h3>Step 3: Reload ClickToPlugin</h3>

<p>Disable and enable the extension and the new killer will be operating!</p>
</section>

<section id="create_killers">
<header>
<h2>How to create a killer</h2>
<div class="toplink"><a href="#top">To the top</a></div>
</header>

<p>Killer files are included as scripts in the extension’s global page, using ClickToPlugin’s built-in <a href="../universalextension">universal extension</a>. In particular, all killer files share the same scope, so global definitions must be avoided.</p>

<p>Here is a minimal killer file:</p>
<pre>var killer = new Object();
addKiller("Some name", killer);

killer.canKill = function(data) {return false;};
killer.process = function(data, callback) {};</pre>

<p>The first line creates the killer and the second line adds it to ClickToPlugin’s list of killers. The first argument of the <code>addKiller</code> function serves as a unique identifier for this killer. The mandatory methods <a href="#cankill_method"><code>canKill</code></a> and <a href="#process_method"><code>process</code></a> are described below.</p>

<p>Here is what an actual killer file looks like:</p>
<pre>var killer = new Object();
addKiller("GitHub", killer);

killer.canKill = function(data) {
   if(data.plugin !== "Flash") return false;
   return data.src.indexOf("http://hoyois.github.com/") !== -1;
};

killer.process = function(data, callback) {
   var flashvars = parseFlashVariables(data.params);
   if(!flashvars.mp4Source) return;
   
   callback({
      "playlist": [{
         "poster": decodeURIComponent(flashvars.previewImage),
         "sources": [{
            "url": decodeURIComponent(flashvars.mp4Source),
            "isNative": true
         }]
      }]
   });
};</pre>

<p>This killer will process all Flash content hosted on this domain and offer a simple HTML5 alternative for those that have the <code>mp4Source</code> Flash variable.</p>

<p>The <a href="#database">killers database</a> provides further examples with varying degrees of complexity.</p>

<h3 id="cankill_method">The <code>canKill</code> method</h3>

<p>The <code>canKill</code> method has a <a href="#plugin_data">plug-in data object</a> as argument and must return a boolean. This function should be kept as simple as possible, since it will be executed for every blocked plug-in object. If it returns <code>true</code>, ClickToPlugin stops evaluating the <code>canKill</code> methods of other killers and runs the <code>process</code> method of this killer. Otherwise the plug-in data object is passed to the next killer’s <code>canKill</code> method. In particular, the <code>canKill</code> method should not modify its argument if it does not return <code>true</code>.</p>

<h3 id="process_method">The <code>process</code> method</h3>

<p>The <code>process</code> method has a <a href="#plugin_data">plug-in data object</a> and a function <code>callback</code> as arguments and does not return anything. To be successful, this method must apply the <code>callback</code> function to a <a href="#media_data">media data object</a>. This needs not happen in the body of the <code>process</code> method itself: for example, if the killer makes an HTTP request, the <code>callback</code> function will be called in the <code>onload</code> handler of the XMLHttpRequest object.</p>

<h3 id="plugin_data">Plug-in data objects</h3>

<p>The <em>same</em> object is passed as first argument to the <code>canKill</code> and <code>process</code> methods. It has the following properties:</p>
<ul>
	<li><code>plugin</code> is a string containing the name of the blocked plug-in. This string also appears on the placeholder of the blocked plug-in.</li>
	<li><code>src</code> is a string containing the source of the blocked plug-in as absolute URL. For the Flash plug-in, this is a SWF file, for the Silverlight plug-in an XAP file, etc.</li>
	<li><code>location</code> is a string containing the address of the blocked plug-in’s document as an absolute URL.</li>
	<li><code>title</code> is a string containing the <code>title</code> of the blocked plug-in’s document.</li>
	<li><code>baseURL</code> is a string containing the base URL of the blocked plug-in’s document.</li>
	<li><code>params</code> is a string. For Flash objects it is the value of the <code>flashvars</code> parameter, and for Silverlight objects of the <code>initparams</code> parameter.</li>
</ul>

<h3 id="media_data">Media data objects</h3>

<p>A media data object contains data to be used by ClickToPlugin’s media player. The following minimal media data object will result in an HTML5 video element with <code>src</code> attribute set to <code>videoURL</code>:</p>
<pre>{
   "playlist": [{
      "sources": [{
         "url": videoURL
      }]
   }]
};</pre>

<p>The only mandatory property of a media data object is <code>playlist</code>, which is an array of media track objects.</p>

<p>Each media track object can have the following properties:</p>
<ul>
	<li><code>sources</code> (mandatory) is an array of media source objects;</li>
	<li><code>poster</code> is a URL to an image file to be used as poster image for the video element;</li>
	<li><code>title</code> is the title of the track;</li>
	<li><code>siteInfo</code> is an object that makes the “View on Site” command appear in the shortcut menu. It has two mandatory properties:
	<ul>
		<li><code>name</code> is the name of the site displayed in the shortcut menu, e.g. <code>"YouTube"</code>;</li>
		<li><code>url</code> is the absolute URL to open when the “View on Site” command is used.</li>
	</ul>
	</li>
</ul>

<p>Each media source object can have the following properties:</p>
<ul>
	<li><code>url</code> (mandatory) is a URL to a video file that must be playable by QuickTime;</li>
	<li><code>format</code> is the string that will appear in the source selector (it should be set if there are more than one source);</li>
	<li><code>height</code> is an integer approximating the native height in pixels of the video;</li>
	<li><code>isNative</code> is a boolean which should be set to <code>true</code> only if the video file can be played natively by QuickTime;</li>
	<li><code>mediaType</code> is either <code>"audio"</code> or <code>"video"</code>, the latter being the default value.</li>
</ul>

<h3 id="available_methods">Available functions</h3>

<p>The following functions form the interface between killers and ClickToPlugin.</p>
<ul>
	<li><code>addKiller(name, killer)</code> adds the object <code>killer</code> to the list of killers.</li>
	<li><code>hasKiller(name)</code> returns a boolean indicating if the killer named <code>name</code> is loaded.</li>
	<li><code>getKiller(name)</code> returns the killer object named <code>name</code>.</li>
</ul>
<p>ClickToPlugin also defines the following useful functions that can be used in killer files.</p>
<ul>
	<li><code>parseFlashVariables(flashvars)</code> returns a Flash object’s <code>flashvars</code> as a key–value object.</li>
	<li><code>parseSLVariables(initparams)</code> returns a Silverlight object’s <code>initparams</code> as a key–value object.</li>
	<li><code>unescapeHTML(text)</code> replaces HTML entities in <code>text</code> by the characters they represent and returns the result.</li>
	<li><code>unescapeUnicode(text)</code> replaces any sequence of the form <code>\uxxxx</code> in <code>text</code> by the character with code <code>xxxx</code> and returns the result.</li>
	<li><code>makeAbsoluteURL(url, base)</code> returns the resolution of the URL <code>url</code> with respect to <code>base</code>.</li>
	<li><code>extInfo(url)</code> reads the extension of a URL and returns: <code>undefined</code> if <code>url</code> has no extension, <code>null</code> if QuickTime cannot play files with that extension, and two properties otherwise:
	<ul>
		<li><code>isNative</code> is a boolean;</li>
		<li><code>mediaType</code> is either <code>"audio"</code> or <code>"video"</code>.</li>
	</ul>
	</li>
	<li><code>getMIMEType(resourceURL, handleMIMEType)</code> runs the function <code>handleMIMEType</code> with the MIME type of the resource <code>resourceURL</code> as argument.</li>
	<li><code>HTML5.canPlayType(MIMEType)</code> returns <code>""</code>, <code>"maybe"</code>, or <code>"probably"</code>. Avoid this function in favor of the following predefined variables:
	<ul>
		<li><code>canPlayFLV</code>;</li>
		<li><code>canPlayWM</code>;</li>
		<li><code>canPlayDivX</code>;</li>
		<li><code>canPlayWebM</code>;</li>
		<li><code>canPlayOgg</code>.</li>
	</ul>
	</li>
	<li><code>parseXSPlaylist(playlistURL, baseURL, posterURL, startIndex, handleMediaData)</code> runs the function <code>handleMediaData</code> with argument a <a href="#media_data">media data object</a> obtained from the XSPF file <code>playlistURL</code>.</li>
</ul>
</section>

<footer>
<p id="footer_left">Marc Hoyois, <time datetime="2011-08-23">August 23, 2011</time></p>
<p id="footer_right"><a href="#top">To the top</a></p>
<p id="footer_middle"><a href="http://validator.nu/?doc=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Fclicktoplugin%2Fkillers.xhtml">XHTML5</a> • <a href="http://hoyois.github.com/html5outliner/?xml=true&amp;url=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Fclicktoplugin%2Fkillers.xhtml">Outline</a> • <a href="http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Fclicktoplugin%2Fkillers.xhtml&amp;profile=css3&amp;usermedium=all&amp;warning=1">CSS3</a></p>
</footer>

</body>
</html>
